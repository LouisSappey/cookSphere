{% extends 'base.html.twig' %}

{% block title %}Create Recipe{% endblock %}

{% block body %}
    <h1 class="mt-4">Create Recipe</h1>
    {{ form_start(form, {
        'attr': {
            'class': 'needs-validation',
            'novalidate': 'novalidate',
            'enctype': 'multipart/form-data'
        }
    }) }}
        <div class="form-group">
            {{ form_label(form.title) }}
            {{ form_widget(form.title, {'attr': {'class': 'form-control'}}) }}
        </div>
        <div class="form-group">
            {{ form_label(form.description) }}
            {{ form_widget(form.description, {'attr': {'class': 'form-control'}}) }}
        </div>
        <div class="form-group">
            {{ form_label(form.preparationTime) }}
            {{ form_widget(form.preparationTime, {'attr': {'class': 'form-control'}}) }}
        </div>
        <div class="form-group">
            {{ form_label(form.cookingTime) }}
            {{ form_widget(form.cookingTime, {'attr': {'class': 'form-control'}}) }}
        </div>
        <div class="form-group">
            {{ form_label(form.servings) }}
            {{ form_widget(form.servings, {'attr': {'class': 'form-control'}}) }}
        </div>
        <div class="form-group">
            {{ form_label(form.difficulty) }}
            {{ form_widget(form.difficulty, {'attr': {'class': 'form-control'}}) }}
        </div>
        <div class="form-group">
            {{ form_label(form.category) }}
            {{ form_widget(form.category, {'attr': {'class': 'form-control'}}) }}
        </div>
        <div class="form-group">
            {{ form_label(form.tags) }}
            {{ form_widget(form.tags, {'attr': {'class': 'form-control'}}) }}
        </div>

        <div id="steps" data-prototype="{{ form_widget(form.steps.vars.prototype)|e('html') }}">
            {% for step in form.steps %}
                <div class="step mb-3">
                    <h5>Step {{ loop.index + 1 }}</h5>
                    {{ form_row(step.description, {'attr': {'class': 'form-control'}}) }}
                    {{ form_row(step.orderNumber, {'attr': {'class': 'form-control'}}) }}
                    <button type="button" class="remove-step btn btn-danger btn-sm">Remove Step</button>
                </div>
            {% endfor %}
        </div>

        <button class="btn btn-success" id="add-step">Add Step</button>
        <button type="submit" class="btn btn-primary">Create Recipe</button>
        <button type="button" class="btn btn-secondary" id="getRandomRecipe">No idea? Get inspiration!</button>
        <a href="{{ path('recipe_index') }}" class="btn btn-secondary">Cancel</a>
    {{ form_end(form) }}

    <!-- Modal -->
    <div class="modal fade" id="recipeModal" tabindex="-1" aria-hidden="true">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Recipe Inspiration</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body" id="recipeModalContent">
                </div>
            </div>
        </div>
    </div>

    <script>
        document.getElementById('add-step').addEventListener('click', function(e) {
            e.preventDefault();
            var collectionHolder = document.getElementById('steps');
            var prototype = collectionHolder.dataset.prototype;
            var index = collectionHolder.children.length;
            var newForm = prototype.replace(/__step__/g, index);
            collectionHolder.insertAdjacentHTML('beforeend', newForm);
        });

        document.getElementById('steps').addEventListener('click', function(e) {
            if (e.target.classList.contains('remove-step')) {
                e.preventDefault();
                e.target.closest('.step').remove();
            }
        });

        document.getElementById('getRandomRecipe').addEventListener('click', async () => {
            try {
                const response = await fetch('/api/random-recipe');
                const data = await response.json();
                const recipe = data.meals[0];
                
                let ingredients = '';
                for (let i = 1; i <= 20; i++) {
                    if (recipe[`strIngredient${i}`]) {
                        ingredients += `<li>${recipe[`strMeasure${i}`]} ${recipe[`strIngredient${i}`]}</li>`;
                    }
                }
                const instructions = recipe.strInstructions
                    .split(/\r\n|\r|\n/)
                    .filter(step => step.trim() !== '')
                    .map((step, index) => `<p>${index + 1}. ${step.trim()}</p>`)
                    .join('');

                const content = `
                    <h3>${recipe.strMeal}</h3>
                    <img src="${recipe.strMealThumb}" alt="${recipe.strMeal}" style="max-width: 200px">
                    <h4>Ingredients:</h4>
                    <ul>${ingredients}</ul>
                    <h4>Instructions:</h4>
                    ${instructions}
                `;
                
                document.getElementById('recipeModalContent').innerHTML = content;
                new bootstrap.Modal(document.getElementById('recipeModal')).show();
            } catch (error) {
                console.error('Error:', error);
            }
        });
    </script>
{% endblock %}